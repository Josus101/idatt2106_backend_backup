package org.ntnu.idatt2106.backend.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.http.ResponseEntity;

import org.ntnu.idatt2106.backend.service.ReCaptchaService;

/**
 * Controller class for handling reCAPTCHA-related operations.
 * This class is responsible for defining the endpoints for verifying reCAPTCHA tokens.
 *
 * @version 1.0
 * @since 1.0
 * @Author Jonas Reiher
 */
@RestController
@RequestMapping("/api/reCaptcha")
public class ReCaptchaController {

  @Autowired
  private ReCaptchaService reCaptchaService;

  /**
   * Endpoint for verifying reCAPTCHA tokens.
   * This endpoint receives a token from the frontend and verifies it using Google's reCAPTCHA verification service.
   *
   * @param token the reCAPTCHA token generated by the client-side integration
   * @return a response entity indicating the success or failure of the verification
   */
  @PostMapping("/verify")
  @Operation(
          summary = "Verify reCAPTCHA token",
          description = "Validates the reCAPTCHA token received from the frontend using Google's verification service."
  )
  @ApiResponses(value = {
          @ApiResponse(
              responseCode = "200",
              description = "reCAPTCHA token validated successfully",
              content = @Content(
                  mediaType = "application/json",
                  schema = @Schema(example = "Success!"))
          ),
          @ApiResponse(
                  responseCode = "403",
                  description = "Captcha verification failed or incorrect data format",
                  content = @Content(schema = @Schema(example = "Captcha verification failed."))

          )
  })
  public ResponseEntity<String> handleForm(
          @Parameter(
                  description = "The token string generated by reCAPTCHA client-side integration",
                  required = true,
                  example = "03AGdBq26aG7...")
          @RequestParam("token") String token) throws Exception {

    boolean isValid = reCaptchaService.verifyToken(token);
    if (isValid) {
      return ResponseEntity.ok("Captcha verification passed");
    } else {
      return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Captcha verification failed");
    }
  }
}
